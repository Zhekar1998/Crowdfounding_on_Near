{"id":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","dependencies":[{"name":"/home/yevhhenii/Crowdfounding_on_Near/package.json","includedInParent":true,"mtime":1651056382091},{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/ipfs-http-client/node_modules/ipfs-core-utils/package.json","includedInParent":true,"mtime":1651056373129}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${ codeOrName }\"`));\nclass Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${ codec.name }\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}\n\nexports.Multicodecs = Multicodecs;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multicodecs.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${ codeOrName }\"`));\nclass Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${ codec.name }\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}\n\nexports.Multicodecs = Multicodecs;\n"},"lineCount":43}},"error":null,"hash":"ab5d639b019961f43beb230ab3e38b1f","cacheData":{"env":{}}}