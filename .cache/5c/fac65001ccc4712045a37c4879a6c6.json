{"id":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","dependencies":[{"name":"/home/yevhhenii/Crowdfounding_on_Near/package.json","includedInParent":true,"mtime":1651020585488},{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/package.json","includedInParent":true,"mtime":1651020066329},{"name":"@ipld/car","loc":{"line":5,"column":18},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/cjs/lib/treewalk/splitter.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/@ipld/car/cjs/car-browser.js"},{"name":"multiformats/block","loc":{"line":6,"column":20},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/cjs/lib/treewalk/splitter.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/multiformats/cjs/src/block.js"},{"name":"multiformats/codecs/raw","loc":{"line":7,"column":18},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/cjs/lib/treewalk/splitter.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/multiformats/cjs/src/codecs/raw.js"},{"name":"@ipld/dag-cbor","loc":{"line":8,"column":22},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/cjs/lib/treewalk/splitter.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/@ipld/dag-cbor/cjs/index.js"},{"name":"@ipld/dag-pb","loc":{"line":9,"column":17},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/cjs/lib/treewalk/splitter.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/@ipld/dag-pb/cjs/src/index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar car = require('@ipld/car');\nvar block = require('multiformats/block');\nvar raw = require('multiformats/codecs/raw');\nvar dagCbor = require('@ipld/dag-cbor');\nvar pb = require('@ipld/dag-pb');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\nvar dagCbor__namespace = /*#__PURE__*/_interopNamespace(dagCbor);\nvar pb__namespace = /*#__PURE__*/_interopNamespace(pb);\n\nclass TreewalkCarSplitter {\n  constructor(reader, targetSize, options = {}) {\n    if (typeof targetSize !== 'number' || targetSize <= 0) {\n      throw new Error('invalid target chunk size');\n    }\n    this._reader = reader;\n    this._targetSize = targetSize;\n    this._decoders = [\n      pb__namespace,\n      raw__namespace,\n      dagCbor__namespace,\n      ...options.decoders || []\n    ];\n  }\n  async *cars() {\n    const roots = await this._reader.getRoots();\n    if (roots.length !== 1)\n      throw new Error(`unexpected number of roots: ${ roots.length }`);\n    let channel;\n    for await (const val of this._cars(roots[0])) {\n      channel = val.channel;\n      if (val.out)\n        yield val.out;\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    channel.writer.close();\n    yield channel.out;\n  }\n  async _get(cid) {\n    const rawBlock = await this._reader.get(cid);\n    if (!rawBlock)\n      throw new Error(`missing block for ${ cid }`);\n    const {bytes} = rawBlock;\n    const decoder = this._decoders.find(d => d.code === cid.code);\n    if (!decoder)\n      throw new Error(`missing decoder for ${ cid.code }`);\n    return new block.Block({\n      cid,\n      bytes,\n      value: decoder.decode(bytes)\n    });\n  }\n  async *_cars(cid, parents = [], channel = undefined) {\n    const block = await this._get(cid);\n    channel = channel || Object.assign(car.CarWriter.create(cid), { size: 0 });\n    if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {\n      channel.writer.close();\n      const {out} = channel;\n      channel = newCar(parents);\n      yield {\n        channel,\n        out\n      };\n    }\n    parents = parents.concat(block);\n    channel.size += block.bytes.byteLength;\n    channel.writer.put(block);\n    for (const [, cid] of block.links()) {\n      for await (const val of this._cars(cid, parents, channel)) {\n        channel = val.channel;\n        yield val;\n      }\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    yield { channel };\n  }\n  static async fromIterable(iterable, targetSize, options) {\n    const reader = await car.CarReader.fromIterable(iterable);\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n  static async fromBlob(blob, targetSize, options) {\n    const buffer = await blob.arrayBuffer();\n    const reader = await car.CarReader.fromBytes(new Uint8Array(buffer));\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n}\nfunction newCar(parents) {\n  const ch = Object.assign(car.CarWriter.create(parents[0].cid), { size: parents.reduce((size, b) => size + b.bytes.byteLength, 0) });\n  for (const b of parents) {\n    ch.writer.put(b);\n  }\n  return ch;\n}\n\nexports.TreewalkCarSplitter = TreewalkCarSplitter;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/splitter.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}}],"sources":{"../node_modules/carbites/cjs/lib/treewalk/splitter.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar car = require('@ipld/car');\nvar block = require('multiformats/block');\nvar raw = require('multiformats/codecs/raw');\nvar dagCbor = require('@ipld/dag-cbor');\nvar pb = require('@ipld/dag-pb');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\nvar dagCbor__namespace = /*#__PURE__*/_interopNamespace(dagCbor);\nvar pb__namespace = /*#__PURE__*/_interopNamespace(pb);\n\nclass TreewalkCarSplitter {\n  constructor(reader, targetSize, options = {}) {\n    if (typeof targetSize !== 'number' || targetSize <= 0) {\n      throw new Error('invalid target chunk size');\n    }\n    this._reader = reader;\n    this._targetSize = targetSize;\n    this._decoders = [\n      pb__namespace,\n      raw__namespace,\n      dagCbor__namespace,\n      ...options.decoders || []\n    ];\n  }\n  async *cars() {\n    const roots = await this._reader.getRoots();\n    if (roots.length !== 1)\n      throw new Error(`unexpected number of roots: ${ roots.length }`);\n    let channel;\n    for await (const val of this._cars(roots[0])) {\n      channel = val.channel;\n      if (val.out)\n        yield val.out;\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    channel.writer.close();\n    yield channel.out;\n  }\n  async _get(cid) {\n    const rawBlock = await this._reader.get(cid);\n    if (!rawBlock)\n      throw new Error(`missing block for ${ cid }`);\n    const {bytes} = rawBlock;\n    const decoder = this._decoders.find(d => d.code === cid.code);\n    if (!decoder)\n      throw new Error(`missing decoder for ${ cid.code }`);\n    return new block.Block({\n      cid,\n      bytes,\n      value: decoder.decode(bytes)\n    });\n  }\n  async *_cars(cid, parents = [], channel = undefined) {\n    const block = await this._get(cid);\n    channel = channel || Object.assign(car.CarWriter.create(cid), { size: 0 });\n    if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {\n      channel.writer.close();\n      const {out} = channel;\n      channel = newCar(parents);\n      yield {\n        channel,\n        out\n      };\n    }\n    parents = parents.concat(block);\n    channel.size += block.bytes.byteLength;\n    channel.writer.put(block);\n    for (const [, cid] of block.links()) {\n      for await (const val of this._cars(cid, parents, channel)) {\n        channel = val.channel;\n        yield val;\n      }\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    yield { channel };\n  }\n  static async fromIterable(iterable, targetSize, options) {\n    const reader = await car.CarReader.fromIterable(iterable);\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n  static async fromBlob(blob, targetSize, options) {\n    const buffer = await blob.arrayBuffer();\n    const reader = await car.CarReader.fromBytes(new Uint8Array(buffer));\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n}\nfunction newCar(parents) {\n  const ch = Object.assign(car.CarWriter.create(parents[0].cid), { size: parents.reduce((size, b) => size + b.bytes.byteLength, 0) });\n  for (const b of parents) {\n    ch.writer.put(b);\n  }\n  return ch;\n}\n\nexports.TreewalkCarSplitter = TreewalkCarSplitter;\n"},"lineCount":124}},"error":null,"hash":"ef1fa6393b21ca32557581030ec834c9","cacheData":{"env":{}}}