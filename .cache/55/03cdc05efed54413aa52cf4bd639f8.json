{"id":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","dependencies":[{"name":"/home/yevhhenii/Crowdfounding_on_Near/package.json","includedInParent":true,"mtime":1651020585488},{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/package.json","includedInParent":true,"mtime":1651020066329},{"name":"@ipld/car","loc":{"line":5,"column":18},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/carbites/cjs/lib/treewalk/joiner.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/@ipld/car/cjs/car-browser.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar car = require('@ipld/car');\n\nclass TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length)\n      throw new Error('missing CARs');\n  }\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {writer, out} = car.CarWriter.create(roots);\n    const writeCar = async () => {\n      const written = new Set();\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString()))\n            continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n      try {\n        await writeBlocks(reader);\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n    writeCar();\n    yield* out;\n  }\n}\n\nexports.TreewalkCarJoiner = TreewalkCarJoiner;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/carbites/cjs/lib/treewalk/joiner.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"../node_modules/carbites/cjs/lib/treewalk/joiner.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar car = require('@ipld/car');\n\nclass TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length)\n      throw new Error('missing CARs');\n  }\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {writer, out} = car.CarWriter.create(roots);\n    const writeCar = async () => {\n      const written = new Set();\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString()))\n            continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n      try {\n        await writeBlocks(reader);\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n    writeCar();\n    yield* out;\n  }\n}\n\nexports.TreewalkCarJoiner = TreewalkCarJoiner;\n"},"lineCount":44}},"error":null,"hash":"d2faa41c181e68e6d38f55d6ad2361ea","cacheData":{"env":{}}}