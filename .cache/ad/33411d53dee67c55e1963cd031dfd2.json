{"id":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","dependencies":[{"name":"/home/yevhhenii/Crowdfounding_on_Near/package.json","includedInParent":true,"mtime":1651657199683},{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/ipfs-http-client/node_modules/ipfs-core-utils/package.json","includedInParent":true,"mtime":1651056373129}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\nclass Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}\n\nexports.Multibases = Multibases;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}}],"sources":{"../node_modules/ipfs-http-client/node_modules/ipfs-core-utils/cjs/src/multibases.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\nclass Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}\n\nexports.Multibases = Multibases;\n"},"lineCount":45}},"error":null,"hash":"ace5ad49aed0baf048eac5f30b102f15","cacheData":{"env":{}}}