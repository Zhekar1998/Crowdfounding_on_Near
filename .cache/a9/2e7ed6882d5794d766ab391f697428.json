{"id":"../node_modules/dag-jose/lib/signing.js","dependencies":[{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/lib/signing.js.map","includedInParent":true,"mtime":1651056373101},{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/src/signing.ts","includedInParent":true,"mtime":1651056373101},{"name":"/home/yevhhenii/Crowdfounding_on_Near/package.json","includedInParent":true,"mtime":1651056382091},{"name":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/package.json","includedInParent":true,"mtime":1651056373101},{"name":"./utils","loc":{"line":3,"column":24},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/lib/signing.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/lib/utils.js"},{"name":"multiformats/cid","loc":{"line":4,"column":22},"parent":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/lib/signing.js","resolved":"/home/yevhhenii/Crowdfounding_on_Near/node_modules/dag-jose/node_modules/multiformats/cjs/src/cid.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nconst cid_1 = require(\"multiformats/cid\");\nfunction fromSplit(split) {\n    const [protectedHeader, payload, signature] = split;\n    return {\n        payload,\n        signatures: [{ protected: protectedHeader, signature }],\n        link: cid_1.CID.decode(utils_1.fromBase64url(payload)),\n    };\n}\nfunction encodeSignature(signature) {\n    const encoded = {\n        signature: utils_1.fromBase64url(signature.signature),\n    };\n    if (signature.header)\n        encoded.header = signature.header;\n    if (signature.protected)\n        encoded.protected = utils_1.fromBase64url(signature.protected);\n    return encoded;\n}\nfunction encode(jws) {\n    const payload = utils_1.fromBase64url(jws.payload);\n    try {\n        cid_1.CID.decode(payload);\n    }\n    catch (e) {\n        throw new Error('Not a valid DagJWS');\n    }\n    const encodedJws = {\n        payload,\n        signatures: jws.signatures.map(encodeSignature),\n    };\n    return encodedJws;\n}\nfunction decodeSignature(encoded) {\n    const sign = {\n        signature: utils_1.toBase64url(encoded.signature),\n    };\n    if (encoded.header)\n        sign.header = encoded.header;\n    if (encoded.protected)\n        sign.protected = utils_1.toBase64url(encoded.protected);\n    return sign;\n}\nfunction decode(encoded) {\n    const decoded = {\n        payload: utils_1.toBase64url(encoded.payload),\n        signatures: encoded.signatures.map(decodeSignature),\n    };\n    decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n    return decoded;\n}\nexports.default = {\n    fromSplit,\n    encode,\n    decode,\n};\n"},"sourceMaps":{"js":{"version":3,"file":"signing.js","sourceRoot":"","sources":["../src/signing.ts"],"names":[],"mappings":";;AAAA,mCAAoD;AACpD,0CAAsC;AAiCtC,SAAS,SAAS,CAAC,KAAoB;IACrC,MAAM,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,GAAG,KAAK,CAAA;IACnD,OAAO;QACL,OAAO;QACP,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;QACvD,IAAI,EAAE,SAAG,CAAC,MAAM,CAAC,qBAAa,CAAC,OAAO,CAAC,CAAC;KACzC,CAAA;AACH,CAAC;AAED,SAAS,eAAe,CAAC,SAAuB;IAC9C,MAAM,OAAO,GAAqB;QAChC,SAAS,EAAE,qBAAa,CAAC,SAAS,CAAC,SAAS,CAAC;KAC9C,CAAA;IACD,IAAI,SAAS,CAAC,MAAM;QAAE,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAA;IACvD,IAAI,SAAS,CAAC,SAAS;QAAE,OAAO,CAAC,SAAS,GAAG,qBAAa,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;IAC/E,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,SAAS,MAAM,CAAC,GAAW;IACzB,MAAM,OAAO,GAAG,qBAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC1C,IAAI;QACF,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;KACpB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;KACtC;IACD,MAAM,UAAU,GAAe;QAC7B,OAAO;QACP,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,eAAe,CAAC;KAChD,CAAA;IACD,OAAO,UAAU,CAAA;AACnB,CAAC;AAED,SAAS,eAAe,CAAC,OAAyB;IAChD,MAAM,IAAI,GAAiB;QACzB,SAAS,EAAE,mBAAW,CAAC,OAAO,CAAC,SAAS,CAAC;KAC1C,CAAA;IACD,IAAI,OAAO,CAAC,MAAM;QAAE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;IAChD,IAAI,OAAO,CAAC,SAAS;QAAE,IAAI,CAAC,SAAS,GAAG,mBAAW,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IACtE,OAAO,IAAI,CAAA;AACb,CAAC;AAED,SAAS,MAAM,CAAC,OAAmB;IACjC,MAAM,OAAO,GAAW;QACtB,OAAO,EAAE,mBAAW,CAAC,OAAO,CAAC,OAAO,CAAC;QACrC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,eAAe,CAAC;KACpD,CAAA;IACD,OAAO,CAAC,IAAI,GAAG,SAAG,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;IAC1D,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,kBAAe;IACb,SAAS;IACT,MAAM;IACN,MAAM;CACP,CAAA","sourcesContent":["import { fromBase64url, toBase64url } from './utils'\nimport { CID } from 'multiformats/cid'\n\ninterface JWSSignature {\n  header?: Record<string, any>\n  protected?: string\n  signature: string\n}\n\nexport interface DagJWS {\n  payload: string\n  signatures: Array<JWSSignature>\n  link?: CID\n}\n\ninterface EncodedSignature {\n  header?: Record<string, any>\n  protected?: Uint8Array\n  signature: Uint8Array\n}\n\nexport interface EncodedJWS {\n  payload: Uint8Array\n  signatures: Array<EncodedSignature>\n}\n\nexport interface PublicKey {\n  id: string\n  type: string\n  controller: string\n  publicKeyHex?: string\n  publicKeyBase64?: string\n}\n\nfunction fromSplit(split: Array<string>): DagJWS {\n  const [protectedHeader, payload, signature] = split\n  return {\n    payload,\n    signatures: [{ protected: protectedHeader, signature }],\n    link: CID.decode(fromBase64url(payload)),\n  }\n}\n\nfunction encodeSignature(signature: JWSSignature): EncodedSignature {\n  const encoded: EncodedSignature = {\n    signature: fromBase64url(signature.signature),\n  }\n  if (signature.header) encoded.header = signature.header\n  if (signature.protected) encoded.protected = fromBase64url(signature.protected)\n  return encoded\n}\n\nfunction encode(jws: DagJWS): EncodedJWS {\n  const payload = fromBase64url(jws.payload)\n  try {\n    CID.decode(payload)\n  } catch (e) {\n    throw new Error('Not a valid DagJWS')\n  }\n  const encodedJws: EncodedJWS = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature),\n  }\n  return encodedJws\n}\n\nfunction decodeSignature(encoded: EncodedSignature): JWSSignature {\n  const sign: JWSSignature = {\n    signature: toBase64url(encoded.signature),\n  }\n  if (encoded.header) sign.header = encoded.header\n  if (encoded.protected) sign.protected = toBase64url(encoded.protected)\n  return sign\n}\n\nfunction decode(encoded: EncodedJWS): DagJWS {\n  const decoded: DagJWS = {\n    payload: toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature),\n  }\n  decoded.link = CID.decode(new Uint8Array(encoded.payload))\n  return decoded\n}\n\nexport default {\n  fromSplit,\n  encode,\n  decode,\n}\n"]}},"error":null,"hash":"62f1edf45898a9cfa5a710e9b3df843b","cacheData":{"env":{}}}